{"version":3,"sources":["app.js"],"names":["returnHTML","link","url","hovertext","icon","name","document","addEventListener","apiKey","weatherWidget","getElementById","fetchWeather","lat","lon","fetch","then","response","ok","Error","status","json","data","temperature","current","temp_c","condition","text","innerHTML","updateWeatherWidget","catch","error","console","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","updateClock","clockElement","date","Date","toLocaleTimeString","setInterval","htmlContent","sections","forEach","section","links","searchBar","dropdownButton","dropdownContent","selectedSearchEngine","value","focus","style","display","querySelectorAll","item","event","getAttribute","key","query","trim","searchUrl","encodeURIComponent","window","location","href","contains","target","setTimeout","onclick","matches"],"mappings":"AAmIA,SAAAA,WAAAC,GACA,MAAA,sBACAA,EAAAC,eAAAD,EAAAE,6DACAF,EAAAG,kEACAH,EAAAI,iCAGA,CA1IAC,SAAAC,iBAAA,oBAAA,WACA,MAAAC,EAAA,kCACAC,EAAAH,SAAAI,eAAA,kBAGA,SAAAC,EAAAC,EAAAC,GAGAC,MAFA,kDAAAN,OAAAI,KAAAC,YAGAE,MAAAC,IACA,IAAAA,EAAAC,GACA,MAAA,IAAAC,MAAA,uBAAAF,EAAAG,UAEA,OAAAH,EAAAI,MAAA,IAEAL,MAAAM,KAUA,SAAAA,GACA,MAAAC,EAAAD,EAAAE,QAAAC,OACAC,EAAAJ,EAAAE,QAAAE,UAAAC,KACAtB,EAAAiB,EAAAE,QAAAE,UAAArB,KAEAK,EAAAkB,UAAA,wCACAL,6CACAG,gCACArB,WAAAqB,eAEA,CAnBAG,CAAAP,EAAA,IAEAQ,OAAAC,IACArB,EAAAkB,UAAA,sCACAI,QAAAD,MAAA,mCAAAA,EAAA,GAEA,CAiBAE,UAAAC,YACAD,UAAAC,YAAAC,oBAAAC,IAGAxB,EAFAwB,EAAAC,OAAAC,SACAF,EAAAC,OAAAE,UACA,IACAR,IACArB,EAAAkB,UAAA,2CACAI,QAAAD,MAAA,8BAAAA,EAAA,IAGArB,EAAAkB,UAAA,sDAMA,IAEArB,SAAAC,iBAAA,oBAAA,KACA,SAAAgC,IACA,MAAAC,EAAAlC,SAAAI,eAAA,SACA,IAAA+B,EAAA,IAAAC,KACAF,EAAAb,UAAAc,EAAAE,oBACA,CAEAJ,IACAK,YAAAL,EAAA,KAEAzB,MAAA,oBACAC,MAAAC,GAAAA,EAAAI,SACAL,MAAAM,IACA,IAAAwB,EAAA,mCACAxB,EAAAyB,SAAAC,SAAAC,IACAH,GAAA,4BAAAG,EAAA3C,YACA2C,EAAAC,MAAAF,SAAA9C,IACA4C,GAAA7C,WAAAC,EAAA,IAEA4C,GAAA,QAAA,IAEAA,GAAA,SAEAvC,SAAAI,eAAA,SAAAiB,UAAAkB,CAAA,IAEAhB,OAAAC,IACAC,QAAAD,MAAA,gCAAAA,EAAA,IAGA,MAAAoB,EAAA5C,SAAAI,eAAA,UACAyC,EAAA7C,SAAAI,eAAA,mBACA0C,EAAA9C,SAAAI,eAAA,oBACA,IAAA2C,EAAA,6BAEAH,EAAAI,MAAA,GACAJ,EAAAK,QAEAJ,EAAA5C,iBAAA,SAAA,KACA6C,EAAAI,MAAAC,QAAA,UAAAL,EAAAI,MAAAC,QAAA,OAAA,OAAA,IAGAnD,SAAAoD,iBAAA,kBAAAX,SAAAY,IACAA,EAAApD,iBAAA,SAAAqD,IACAP,EAAAM,EAAAE,aAAA,YACAV,EAAAxB,UAAAgC,EAAAhC,UAAAgC,yDACAP,EAAAI,MAAAC,QAAA,MAAA,GACA,IAGAP,EAAA3C,iBAAA,YAAA,SAAAqD,GACA,GAAA,UAAAA,EAAAE,IAAA,CACA,MAAAC,EAAAb,EAAAI,MAAAU,OACA,GAAAD,EAAA,CACA,MAAAE,EAAA,GAAAZ,IAAAa,mBAAAH,KACAI,OAAAC,SAAAC,KAAAJ,CACA,CACA,CACA,IAGA3D,SAAAC,iBAAA,SAAAqD,IACAV,EAAAoB,SAAAV,EAAAW,SAAApB,EAAAmB,SAAAV,EAAAW,SAAAnB,EAAAkB,SAAAV,EAAAW,SACAC,YAAA,IAAAtB,EAAAK,SAAA,IACA,IAIAY,OAAAM,QAAA,SAAAb,GACAA,EAAAW,OAAAG,QAAA,sBACAtB,EAAAI,MAAAC,QAAA,OAEA,CAAA","file":"app.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\r\n    const apiKey = '1c70c9d071434cc9884212912240207'; // Replace 'YOUR_API_KEY' with your actual WeatherAPI key\r\n    const weatherWidget = document.getElementById('weather-widget');\r\n\r\n    // Function to fetch weather data\r\n    function fetchWeather(lat, lon) {\r\n        const apiUrl = `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${lat},${lon}&aqi=no`;\r\n\r\n        fetch(apiUrl)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                updateWeatherWidget(data);\r\n            })\r\n            .catch(error => {\r\n                weatherWidget.innerHTML = '<p>Error fetching weather data.</p>';\r\n                console.error('Error fetching the weather data:', error);\r\n            });\r\n    }\r\n\r\n    // Function to update the weather widget\r\n    function updateWeatherWidget(data) {\r\n        const temperature = data.current.temp_c;\r\n        const condition = data.current.condition.text;\r\n        const icon = data.current.condition.icon;\r\n\r\n        weatherWidget.innerHTML = `\r\n            <p class=\"temperature\">${temperature}Â°C</p>\r\n            <p class=\"condition\">${condition}</p>\r\n            <img src=\"${icon}\" alt=\"${condition}\">\r\n        `;\r\n    }\r\n\r\n    // Function to get user's location\r\n    function getLocation() {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                const lat = position.coords.latitude;\r\n                const lon = position.coords.longitude;\r\n                fetchWeather(lat, lon);\r\n            }, error => {\r\n                weatherWidget.innerHTML = '<p>Unable to retrieve your location.</p>';\r\n                console.error('Error getting the location:', error);\r\n            });\r\n        } else {\r\n            weatherWidget.innerHTML = '<p>Geolocation is not supported by this browser.</p>';\r\n        }\r\n    }\r\n\r\n    // Fetch weather data on page load\r\n    getLocation();\r\n});\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    function updateClock() {\r\n        const clockElement = document.getElementById('clock');\r\n        let date = new Date();\r\n        clockElement.innerHTML = date.toLocaleTimeString();\r\n    }\r\n\r\n    updateClock();\r\n    setInterval(updateClock, 1000);\r\n\r\n    fetch('/json/links.json')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            let htmlContent = '<div class=\"sections-container\">';\r\n            data.sections.forEach(section => {\r\n                htmlContent += `<div class=\"section\"><h2>${section.name}</h2>`;\r\n                section.links.forEach(link => {\r\n                    htmlContent += returnHTML(link);\r\n                });\r\n                htmlContent += '</div>';\r\n            });\r\n            htmlContent += '</div>';\r\n\r\n            document.getElementById('links').innerHTML = htmlContent;\r\n        })\r\n        .catch(error => {\r\n            console.error('Error fetching the JSON data:', error);\r\n        });\r\n\r\n    const searchBar = document.getElementById('search');\r\n    const dropdownButton = document.getElementById('dropdown-button');\r\n    const dropdownContent = document.getElementById('dropdown-content');\r\n    let selectedSearchEngine = 'https://duckduckgo.com/?q=';\r\n\r\n    searchBar.value = '';\r\n    searchBar.focus();\r\n\r\n    dropdownButton.addEventListener('click', () => {\r\n        dropdownContent.style.display = dropdownContent.style.display === 'block' ? 'none' : 'block';\r\n    });\r\n\r\n    document.querySelectorAll('.dropdown-item').forEach(item => {\r\n        item.addEventListener('click', (event) => {\r\n            selectedSearchEngine = item.getAttribute('data-url');\r\n            dropdownButton.innerHTML = item.innerHTML + ' ' + '<iconify-icon icon=\"bx:bx-caret-down\"></iconify-icon>';\r\n            dropdownContent.style.display = 'none';\r\n        });\r\n    });\r\n\r\n    searchBar.addEventListener('keypress', function(event) {\r\n        if (event.key === 'Enter') {\r\n            const query = searchBar.value.trim();\r\n            if (query) {\r\n                const searchUrl = `${selectedSearchEngine}${encodeURIComponent(query)}`;\r\n                window.location.href = searchUrl;\r\n            }\r\n        }\r\n    });\r\n\r\n    // Refocus the search bar when the page is clicked, but not when the search bar is clicked\r\n    document.addEventListener('click', (event) => {\r\n        if (!searchBar.contains(event.target) && !dropdownButton.contains(event.target) && !dropdownContent.contains(event.target)) {\r\n            setTimeout(() => searchBar.focus(), 100);\r\n        }\r\n    });\r\n\r\n    // Close the dropdown if the user clicks outside of it\r\n    window.onclick = function(event) {\r\n        if (!event.target.matches('.dropdown-button')) {\r\n            dropdownContent.style.display = 'none';\r\n        }\r\n    };\r\n});\r\n\r\nfunction returnHTML(link) {\r\n    return `\r\n        <a href=\"${link.url}\" title=\"${link.hovertext}\" class=\"link\">\r\n            <iconify-icon icon=\"${link.icon}\" class=\"textIcons\"></iconify-icon>    \r\n            <span>${link.name}</span>\r\n        </a>\r\n    `;\r\n}\r\n"]}